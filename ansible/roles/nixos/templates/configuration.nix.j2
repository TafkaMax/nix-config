# {{ ansible_managed }}
# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
  imports = [
      ./services/nixos-auto-update.nix
  ];

  boot = {
	kernelPackages = pkgs.linuxPackages_latest;
    readOnlyNixStore = false;
	  loader = {
  		efi.canTouchEfiVariables = true;
		systemd-boot.enable = {{ nixos_systemd_boot }};
  		grub = {
  		  useOSProber = true;
  		  enable = true;
  		  efiSupport = true;
  		  enableCryptodisk = true;
  		  device = "nodev";
  		};
	  };
  	initrd = {
	    availableKernelModules = [
	      "cryptd"
	    ];
	    luks.devices = {
        crypt = {
	        # Change this value to point to a storage device where the root partition will live.
          # eg. /dev/nvme0n1p2
          device = "/dev/{{ nixos_root_disk }}";
          preLVM = true;
        };
	    };
    };
  };

  networking = {
    useDHCP = false;
    # Configure this to your needs.
    {% for network in nixos_networks %}
    {% endfor %}
    #1. Work PC
    #interfaces.enp0s31f6.useDHCP = true;
    #hostname = "tansper-3106";
    #networkmanager.enable = true;
    #2. Personal Laptop
    hostName = "tafka-nixos";
    networkmanager.enable = true;
    interfaces = {
    	enp2s0 = {
     		useDHCP = true;
     	};
     	wlp4s0 = {
     		useDHCP = true;
     	};
    };
  };


  # Set your time zone.

  time.timeZone = "Europe/Tallinn";

  # Select internationalisation properties.
  i18n = {
	  defaultLocale = "en_US.UTF-8";
	  supportedLocales = [ "en_US.UTF-8/UTF-8" ];
  };

  console = {
    font = "Lat2-Terminus16";
    keyMap = "us";
  };

  fonts = {
    fontDir.enable = true;
    enableGhostscriptFonts = true;
    fonts = with pkgs; [
      powerline-fonts
      # Nerdfonts currently 403 Arimo.tar not available
      #nerdfonts
    ];
  };
  
  virtualisation = {
    docker = {
      enable = true;
      autoPrune.enable = true;
      enableOnBoot = true;
    };
  };

  security = {
    sudo = {
      enable = true;
      wheelNeedsPassword = false;
    };
  };

  services = {
 	  nixos-auto-update.enable = true;
  	# Enable the X11 windowing system.
	  xserver = {
		  enable = true;
		  displayManager = {
			  gdm.enable = true;
			  autoLogin = {
				  enable = false;
				  # Insert your username here.
				  # CHANGE_ME
				  user = "tafka";
			  };
		  };
		  desktopManager = {
			  gnome.enable = true;
		  };
		  layout = "us";
	    libinput.enable = true;
	  };
  	# Enable CUPS to print documents.
	  printing = {
		  enable = true;
	  };
	  openssh = {
      enable = true;
      settings = {
        X11Forwarding = true;
        PasswordAuthentication = false;
        PermitRootLogin = "no";
      };
	  };
	  fwupd = {
		  enable = true;
	  };
	  pcscd = {
		  enable = true;
	  };
	  udev = {
		  packages = [ pkgs.yubikey-personalization ];
	  };
  };
  

  # Enable sound.
  sound = {
    enable = true;
  };
  
  hardware = {
    pulseaudio.enable = true;
    bluetooth.enable = true;
  };

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users  = {
    mutableUsers = false;
    # Set users here.
    users.tafka = {
      isNormalUser = true;
      # CHANGE_ME
      home = "/home/tafka";
      description = "Taavi Ansper";
      shell = pkgs.zsh;
      extraGroups = [ "wheel" "networkmanager" "docker" ]; # Enable ‘sudo’ for the user.
      # REPLACE_ME
      hashedPassword = "$HASHED_PASSWORD";
      # REPLACE_ME
      #openssh.authorizedKeys.keys = [ "$SSH_KEYS" ];
    };
  };

  programs = {
    ssh.startAgent = false;
    vim.defaultEditor = true;
    zsh.enable = true;
  };
  
  environment = {
    systemPackages = with pkgs; [
      vim
      neovim
      firefox
      thunderbird
      rsync
      git
      dmidecode
      gnupg
      pinentry-curses
      pinentry-qt
      paperkey
      wget
    ];
  };

  # Enable unfree packages
  nixpkgs = {
    config = {
      allowUnfree = true;
      allowBroken = true;
    };
  };  

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  nix = {
    settings = {
      sandbox = true;
      trusted-users = [ "@wheel" ];
      allowed-users = [ "@wheel" ];
      auto-optimise-store = true;
    };
    package = pkgs.nixFlakes;   
    extraOptions = ''
      experimental-features = nix-command flakes
      keep-outputs = true
      keep-derivations = true
    '';
    gc = {
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 7d --max-freed $((64 * 1024**3))";
    };
    optimise = {
      automatic = true;
      dates = [ "weekly" ];
    };
  };

  system = {
    stateVersion = "23.05"; # Did you read the comment?
    autoUpgrade = {
      enable = true;
      allowReboot = false;
      flake = github:tafkamax/nixconf;
      flags = [
        "--recreate-lock-file"
        "--no-write-lock-file"
        "-L"
      ];
      dates = "daily";
    };
  };
}